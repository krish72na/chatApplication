
import java.net.*;

// import javax.swing.BorderFactory;
// import javax.swing.JFrame;
import javax.swing.*;
// import javax.swing.JLabel;
// import javax.swing.JScrollPane;
// import javax.swing.JTextArea;
// import javax.swing.JTextField;
import javax.swing.SwingConstants;

import java.awt.BorderLayout;
import java.awt.Font;
import java.io.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
class Server extends JFrame
{

    ServerSocket server;
    Socket socket;
    BufferedReader br;
    PrintWriter out;

    //Declare Components

    private JLabel heading=new JLabel("ServerArea");
    private JTextArea messageArea=new JTextArea();
    private JTextField messageInput=new JTextField();
    private Font font=new Font("Roboto",Font.PLAIN,20);

    //Constructor
    public Server()
    {
        try {
            server=new ServerSocket(5000);
            System.out.println("server is ready to accept connection");
            System.out.println("waiting...");
            socket=server.accept();
            br=new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out=new PrintWriter(socket.getOutputStream());
                createGUI();
                handleEvents();
                startReading();
            startWriting();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //HandleEvents
    private void handleEvents()
    {
       messageInput.addKeyListener(new KeyListener(){

        public void keyReleased(KeyEvent e)
        {
            if(e.getKeyCode()==10)
            {
                String contentToSend=messageInput.getText();
                messageArea.append("Me :" +contentToSend + "\n");
                out.println(contentToSend);
                out.flush();
                messageInput.setText(" ");
                messageInput.requestFocus();
            }
        }

        @Override
        public void keyTyped(KeyEvent e) {
            
            
        }

        @Override
        public void keyPressed(KeyEvent e) {
            
            
        }


       });

    }

    //GUI code
    private void createGUI()
    {
        //GUI code
        this.setTitle("Server Messanger[END]");
        this.setSize(500,500);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);

        //Coding For components
        heading.setFont(font);
        messageArea.setFont(font);
        messageInput.setFont(font);

        heading.setHorizontalAlignment(SwingConstants.CENTER);
        heading.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));

        messageArea.setEditable(false);

        messageInput.setHorizontalAlignment(SwingConstants.CENTER);

        //SetLayout for Frame

        this.setLayout(new BorderLayout());

        //Adding the component to frame
        this.add(heading,BorderLayout.NORTH);
        JScrollPane jScrollPane=new JScrollPane(messageArea);
        this.add(jScrollPane,BorderLayout.CENTER);
        this.add(messageInput,BorderLayout.SOUTH);

        this.setVisible(true);

    }

    //Reading Method
    public void startReading()
    {
        Runnable r1=()->{
            System.out.println("reader started");
            try
            {
            while(true)
            {
                
                String msg=br.readLine();
                if(msg.equals("exit"))
                    {
                System.out.println("Client terminated the chat ");
                socket.close();
                break;
                    }
                System.out.println("Client :"+msg);
                messageArea.append("Client :"+msg + "\n");

        }
     }catch(Exception e) {
          e.printStackTrace();
         System.out.println("connection closed");
     }
    
    
        };
        new Thread(r1).start();
    }


    //Writing MEthod
    public void startWriting()
    {
        System.out.println("writer started");
        Runnable r2=()->{
            try
            {
            while(!socket.isClosed())
            {
                
                    BufferedReader br1=new BufferedReader(new InputStreamReader(System.in));
                    String content=br1.readLine();
                    out.println(content);
                    out.flush();

                    if(content.equals("exit"))
                    {
                        socket.close();
                        break;
                    }
            }  
                } catch (Exception e) {
                    
                    e.printStackTrace();
                    System.out.println("Connection closed");
                }
            
        };
        new Thread(r2).start();
    }

    public static void main(String[] args)
     {
        
    System.out.println("This is server....going to start server");

        new Server();
           }
}


import java.io.*;
import java.net.*;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
//import javax.swing.plaf.basic.BasicBorders;
import javax.swing.JTextArea;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Client extends JFrame
 {
  Socket socket;
  BufferedReader br;
    PrintWriter out;

    //Declare Componets
    private JLabel heading=new JLabel("ClientArea");
    private JTextArea messageArea=new JTextArea();
    private JTextField messageInput=new JTextField();
    private Font font=new Font("Roboto",Font.PLAIN,20);


    //Constructor
  public Client()
  {
    try {
      System.out.println("Sending request to server");
      socket=new Socket("127.0.0.1",5000);
      System.out.println("connection done");
      br=new BufferedReader(new InputStreamReader(socket.getInputStream()));
      out=new PrintWriter(socket.getOutputStream());

        createGUI();
        handleEvents();
      startReading();
       startWriting();

    } catch (Exception e) {
        
    }
  }

  private void handleEvents()
  {
    messageInput.addKeyListener(new KeyListener(){

        @Override
        public void keyTyped(KeyEvent e) {
            
            
        }

        @Override
        public void keyPressed(KeyEvent e) {
            
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
            
                System.out.println("key released "+e.getKeyCode());
                if(e.getKeyCode()==10)
                {
                    System.out.println("You have pressed enter button");
                    String contentToSend=messageInput.getText();
                    messageArea.append("Me :" +contentToSend + "\n");
                    out.println(contentToSend);
                    out.flush();
                    messageInput.setText(" ");
                    messageInput.requestFocus();
                }
        }

    });
  }

  private void createGUI()
  {

    //GUI code
    this.setTitle("Client Messanger[END]");
    this.setSize(500,500);
    this.setLocationRelativeTo(null);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.setVisible(true);

    //Coding for components
    heading.setFont(font);
    messageArea.setFont(font);
    messageInput.setFont(font);

    heading.setHorizontalAlignment(SwingConstants.CENTER);
    heading.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
   
    messageArea.setEditable(false);
    
    messageInput.setHorizontalAlignment(SwingConstants.CENTER);
    //To set layout for frame
    this.setLayout(new BorderLayout());

    //adding the components to frame
    this.add(heading,BorderLayout.NORTH);
    JScrollPane jScrollPane=new JScrollPane(messageArea);
    this.add(jScrollPane,BorderLayout.CENTER);
    this.add(messageInput,BorderLayout.SOUTH);
    
    this.setVisible(true);


  }


  //Reading Method
  public void startReading()
    {
        Runnable r1=()->{
            System.out.println("reader started");
            try
            {
            while(true)
            {
            
                String msg=br.readLine();
                if(msg.equals("exit"))
                {
                System.out.println("Server terminated the chat ");
                JOptionPane.showMessageDialog(this,"Server terminated the chat");
                messageInput.setEnabled(false);
                socket.close();
                break;

                }
                    
                System.out.println("Server :"+msg);
                messageArea.append("Server :"+msg + "\n");
                }
            }catch(Exception e) {
                e.printStackTrace();
                System.out.println("connection closed");
            }
        
    };
    
        
        new Thread(r1).start();
    }

    //Writing Method
    public void startWriting()
    {
        System.out.println("writer started");
        Runnable r2=()->{
            try
            {
            while(true)
            {
                
                    BufferedReader br1=new BufferedReader(new InputStreamReader(System.in));
                    String content=br1.readLine();
                    out.println(content);
                    out.flush();
                    if(content.equals("exit"))
                    {
                        socket.close();
                        break;
                    }
                
            }
        }catch (Exception e) {
                    
            e.printStackTrace();
            System.out.println("connection closed");
        }
        };
        new Thread(r2).start();
    }
     public static void main(String[] args)
     {
      System.out.println("This is client...");
      new Client();
    }    
}
